#include <stdio.h>
#include <stdlib.h>
#include "event.h"
#include "calendar.h"
#include "my_memory_checker_216.h"

/*****************************************************/
/* In this file you will provide tests for your      */
/* calendar application.  Each test should be named  */
/* test1(), test2(), etc. Each test must have a      */
/* brief description of what it is testing (this     */
/* description is important).                        */
/*                                                   */
/* You can tell whether any test failed if after     */
/* executing the students tests, you executed        */
/* "echo $?" on the command line and you get a value */
/* other than 0.  "echo $?" prints the status of     */
/* the last command executed by the shell.           */ 
/*                                                   */
/* Notice that main just calls test1(), test2(), etc.*/
/* and once one fails, the program eventually        */
/* return EXIT_FAILURE; otherwise EXIT_SUCCESS will  */
/* be returned.                                      */
/*****************************************************/

static int comp_minutes(const void *ptr1, const void *ptr2) {
   return ((Event *)ptr1)->duration_minutes - ((Event *)ptr2)->duration_minutes;
}


/* Description here: This test checks ...  */
static int test1() {
   int days = 7;
   Calendar *calendar;

   if (init_calendar("Spr", days, comp_minutes, NULL, &calendar) == SUCCESS) {
      if (print_calendar(calendar, stdout, 1) == SUCCESS) {
         return destroy_calendar(calendar);
      }
   }
   return SUCCESS;
}

/*This test checks whether the add_event function behaves correctly when all
events are equal according to the comparison function*/
static int test2() {
   Calendar *calendar;
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "This should be third", 900, 3, NULL, 1);
   add_event(calendar, "This should be second", 100, 3, NULL, 1); 
   add_event(calendar, "This should be first", 200, 3, NULL, 1);

   /* print_calendar(calendar, stdout, 1);*/

   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks whether the add_event function behaves correctly when some
events are equal according to the comparison function*/
static int test3() {
   Calendar *calendar;
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "This should be first", 900, 2, NULL, 1);
   add_event(calendar, "This should be third", 100, 3, NULL, 1); 
   add_event(calendar, "This should be second", 200, 3, NULL, 1);

   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks to make sure add_event will not add the same event over
again*/
static int test4() {
   Calendar *calendar;
   void *info = NULL;
 
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "This should be first", 900, 3, info, 1);
   add_event(calendar, "This should be first", 900, 3, info, 1); 
   add_event(calendar, "This should be first", 900, 3, info, 1);

   print_calendar(calendar, stdout, 1);
   
   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks find_event_in_day to make sure it returns the correct
value, and whether or not it stores the event.*/
static int test5() {
   Calendar *calendar;
   Event *event = NULL;
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, NULL, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 1);

   print_calendar(calendar, stdout, 1);

   find_event_in_day(calendar, "Work", 1, &event);
   if(event==NULL){
     printf("Still NULL\n");
   }else{
     printf("%s\n", event->name);
   }
   
   printf("%d\n", find_event_in_day(calendar, "Work", 1, &event));
   printf("%d\n", find_event_in_day(calendar, "Grocery Shopping", 1, &event));
   printf("%d\n", find_event_in_day(calendar, "Tea Time", 1, &event));
   printf("%d\n", find_event_in_day(calendar, "W", 1, &event));
   printf("%d\n", find_event_in_day(calendar, "k", 1, &event));
   
   destroy_calendar(calendar);

   return FAILURE;
}

/*This test checks find_event to make sure it returns the correct
value, and whether or not it stores the event.*/
static int test6() {
   Calendar *calendar;
   Event *event;
   const char *work = "Work";
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, NULL, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 1);

   print_calendar(calendar, stdout, 1);

   find_event(calendar, work, &event);
   if(event==NULL){
     printf("Still NULL :(\n");
   }else{
     printf("event name: %s\n", event->name);
   }
   
   printf("%d\n", find_event(calendar, "Work", &event));
   printf("%d\n", find_event(calendar, "Grocery Shopping", &event));
   printf("%d\n", find_event(calendar, "Tea Time", &event));
   printf("%d\n", find_event(calendar, "W", &event));
   printf("%d\n", find_event(calendar, "k", &event));
   
   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks to make sure remove_event actually removes an event*/
static int test7() {
   Calendar *calendar;
   void *info = NULL;
   const char *work = "Work";
 
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, info, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 1);
   
   print_calendar(calendar, stdout, 1);

   if(calendar->events[0]==NULL){
     printf("It is NULL");
   }else{
     printf("%s\n", calendar->events[0]->name);
   }

   printf("Now after remove\n");
   
   remove_event(calendar, work);

   print_calendar(calendar, stdout, 1);
 
   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks to make sure get_event_info behaves correctly when info is
NULL, and if the calendar does not have the specified event.*/
static int test8() {
   Calendar *calendar;
   void *info = NULL;
   void *check;
 
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, info, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 1);
   
   print_calendar(calendar, stdout, 1);

   check = get_event_info(calendar, "Grocery Shopping");

   if(check==NULL){
     printf("Correct\n");
   }else{
     printf("Something is wrong\n");
   }

   check = get_event_info(calendar, "Nonsense lmao");
   
   if(check==NULL){
     printf("Correct again\n");
   }else{
     printf("Something is wrong\n");
   }
 
   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks to make sure get_event_info behaves correctly when info is
NULL, and if the calendar does not have the specified event.*/
static int test9() {
   Calendar *calendar;
   void *info = NULL;
 
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, info, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 1);

   printf("After Clear: \n");

   clear_calendar(calendar);

   print_calendar(calendar, stdout, 1);
   destroy_calendar(calendar);

   return SUCCESS;
}

/*This test checks to make sure get_event_info behaves correctly when info is
NULL, and if the calendar does not have the specified event.*/
static int test10() {
   Calendar *calendar;
   void *info = NULL;
 
   init_calendar("Summer Calendar", 1, comp_minutes, NULL, &calendar);
   add_event(calendar, "Grocery Shopping", 900, 1, info, 1);
   add_event(calendar, "Work", 100, 2, NULL, 1);
   add_event(calendar, "Tea Time", 200, 3, NULL, 2);

   printf("After Clear: \n");

   clear_day(calendar, 1);

   print_calendar(calendar, stdout, 1);
   destroy_calendar(calendar);

   return SUCCESS;
}

int main() {
   int result = SUCCESS;

   /***** Starting memory checking *****/
   start_memory_check();
   /***** Starting memory checking *****/

   if (test1() == FAILURE) result = FAILURE;
   if (test2() == FAILURE) result = FAILURE;
   if (test3() == FAILURE) result = FAILURE;
   if (test4() == FAILURE) result = FAILURE;
   if (test5() == FAILURE) result = FAILURE;
   if (test6() == FAILURE) result = FAILURE;
   /*   if (test7() == FAILURE) result = FAILURE;*/
   if (test8() == FAILURE) result = FAILURE;
   if (test9() == FAILURE) result = FAILURE;
   if (test10() == FAILURE) result = FAILURE;

   /****** Gathering memory checking info *****/
   stop_memory_check();
   /****** Gathering memory checking info *****/
   
   if (result == FAILURE) {
      exit(EXIT_FAILURE);
   }

   return EXIT_SUCCESS;
}
